
map $http_upgrade $connection_upgrade {
    ''      close;
    websocket upgrade;
    default close;
}

server {

	root /var/www/html;

	index index.html;

	server_name hat.adjoint.fun;

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files index.html $uri $uri/ =404;
	}

  # we expect the api to be under /api
  # this is the easiest way to do this
	location /api {
		proxy_pass http://localhost:8077/api;
    # the three directives below are so we support websockets
		proxy_http_version 1.1;
    # "infinitely" wait for queries to the backend, because we keep a websocket open
    # this is not a great idea, we should instead only hang on websocket connections
    # alternatively, we can make the server send pings so this doesn't happen
    proxy_read_timeout 30000;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection $connection_upgrade;
	}

    # THESE ARE ADDED BY CERTBOT
    # not sure how to put these "outside" so that this config is independent from certbot
    listen [::]:443 ssl ipv6only=on; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/hat.adjoint.fun/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/hat.adjoint.fun/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}


# again, certbot redirects to https
server {
    if ($host = hat.adjoint.fun) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


	listen 80 default_server;
	listen [::]:80 default_server;

	server_name hat.adjoint.fun;
    return 404; # managed by Certbot


}
